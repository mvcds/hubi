mixin withDeprecation (type, { message, error })
  - var classes = error ? `${type}__deprecation-note__icon ${type}__deprecation-note__icon--error` : `${type}__deprecation-note__icon`
  span(class=`${type}__deprecation-note`)
    span(class=classes) ⚠
    span #{message}

mixin withFunction({ arguments: args })
  - var last = (args|| []).length - 1
  each argument, index in (args|| [])
    strong #{argument.name}
    | :
    +withAttributeType(argument)
    if (index !== last)
      | ,&nbsp;

mixin withAttributeType(attribute)
  if (attribute.type === 'function')
    | (
    +withFunction(attribute)
    | )&nbsp;
    if (!attribute.isRequired && !attribute.required)
      | ?&nbsp;
    | → #{attribute.return || 'null'}
  else
    if (attribute.type === 'array')
      | [#{attribute.of || 'A'}]
    else
      | #{attribute.type}
    if (!attribute.isRequired && !attribute.required)
      | ?

mixin withAttributeTable(attribute)
  tr
    td(class="attribute__name")
      strong #{attribute.name}
      | :&nbsp;
      +withAttributeType(attribute)

    td(class="attribute__description") #{attribute.description}

      if(attribute.comment)
        span(class="comment-bubble")
          span ?
          span(class="comment-bubble__comment") #{attribute.comment}

      if (attribute.deprecated !== undefined)
        +withDeprecation("attribute", attribute.deprecated)

    td(class="attribute__default") #{attribute.default}

mixin withTokenDeprecation({ message, error })
  - var classes = error ? "token__deprecation-note__icon token__deprecation-note__icon--error" : "token__deprecation-note__icon"
  span(class="token__deprecation-note")
    span(class=classes) ⚠
    span #{message}

mixin withAliases(aliases, rawAliases)
  if (aliases)
    small(class="token__aliases")
      | (A.K.A&nbsp;
      each alias, index in aliases
        span(name=alias) #{rawAliases[index]}
        if (index !== aliases.length - 1)
          | ,&nbsp;
      | )

mixin withToken({ name, object })
  details(id=name, name=name, class="token")
    summary(class="token__title")
      span(class="token__name") #{object.rawName}

      +withAliases(object.aliases, object.rawAliases)

      if (object.deprecated)
        +withDeprecation("token", object.deprecated)

    p(class="token__description") #{object.description}

    if (object.comment)
      p(class="token__comment") #{object.comment}

    if (object.attributes.length)
      table(class="attributes_table")
        colgroup
          col(width="1%")
          col(width="auto")
          col(width="1%")
        thead
          tr
            th Name
            th Description
            th Default
        tbody
          each attribute in object.attributes
            +withAttributeTable(attribute)

doctype html
html(lang="en")
  head
    meta(charset="utf-8")
    meta(http-equiv="X-UA-Compatible" content="IE=edge")
    title Hubi Site of Ubiquitous Language
    script(src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js")
    script(src="hubi.js")
    link(rel="stylesheet" href="hubi.css")
    link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-fork-ribbon-css/0.2.2/gh-fork-ribbon.min.css")

  body
    include hubi.pug
    each token in tokens
      +withToken(token)
